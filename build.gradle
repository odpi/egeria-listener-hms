/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 *
 * To build standard version:
 *   ./gradlew build
 *
 * To build version to support hms version 4
 *  ./gradlew build -Phmsv4
 */

plugins {
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "8.1.0"
    id 'idea'
    id 'maven-publish'
    // Checks for unnecessary & problematic dependencies
    id 'com.autonomousapps.dependency-analysis' version "1.20.0"
    // helps resolve log implementation clashes
    id 'dev.jacomet.logging-capabilities' version "0.11.0"
    // This plugin helps resolve jakarta/javax clashes
    id 'org.gradlex.java-ecosystem-capabilities' version "1.1"
}

// Only do signing when running under github actions
if (System.getenv("CI")) {
    apply plugin: 'signing'
}

repositories {
    mavenCentral()
    maven { url("https://oss.sonatype.org/content/repositories/snapshots") }
    // Needed for old jackson implementation fixed libraries (used in Egeria)
    maven {
        url "https://maven.atlassian.com/3rdparty"
    }
    // uncomment to pick up from local ~/.m2 - but can be unpredictable. recommend to use maven central and snapshots
    //mavenLocal()
}


// Project information
group = 'org.odpi.egeria'
version = '1.1-SNAPSHOT'
ext.name = 'Egeria Hive Metastore Connector'
description = 'Egeria Connector for Hive Metastore'

// Versions - most should be picked up from the import of the Egeria base POM
ext {
    hmsVersion3 = '3.1.3'
    hmsVersion4 = '4.0.0-alpha-2'
    hadoopVersion = '3.3.6'
    hiveStorageVersion = '2.8.1'
    kafkaVersion = '3.4.0'
    collectionsVersion = '4.4'
    jupiterVersion = '5.10.0'
    jacksonVersion = '2.14.2'
    slf4JVersion = '1.7.36'
}

// Dependencies
dependencies {
    // Include at compile & runtime - to support use of connector
    api "org.apache.hadoop:hadoop-common:${hadoopVersion}"
    implementation "org.apache.kafka:kafka-clients:${kafkaVersion}"
    implementation "org.apache.commons:commons-collections4:${collectionsVersion}"
    api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "org.slf4j:slf4j-api:${slf4JVersion}"


    if (project.hasProperty("hmsv4")) {
        // this is implementation not API, so that it brings in GetTableRequest, which is required at runtime by the hms client
        api "org.apache.hive:hive-standalone-metastore-server:${hmsVersion4}"
        api "org.apache.hive:hive-standalone-metastore-common:${hmsVersion4}"
    } else {
        api("org.apache.hive:hive-standalone-metastore:${hmsVersion3}")
       // testImplementation "org.apache.hive:hive-storage-api:${hiveStorageVersion}"
    }

    // Only needed to compile test code
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
}


// Further refinement - Resolve some dependency clashes/issues
configurations.all {
    // check for updates every build - critical when using Snapshots
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    // Resolve logging clashes - consistent with Egeria
}

// Testing
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        html.required = true
    }
    filter {
        includeTestsMatching "*Test"
    }
}


// Maven Central (technically sonatype oss) requires we distribute source and javadoc.
// Also declare use of java 11 language & target
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

// More Java language settings & linting
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = "8"
    targetCompatibility = "8"
    options.incremental = true
    options.fork = true
    options.failOnError = true
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

// For later java versions this is recommended - keep conditional in case we want to build on 8
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// Build an uber jar with dependencies.
shadowJar {
    archiveClassifier = 'jar-with-dependencies'
    // required as this hits a jar limit otherwise
    zip64 true
}

loggingCapabilities {
    // Ensure we use slf4j
    enforceLog4J2()
}

// Dependency checking - see https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin
dependencyAnalysis {
    issues {
        all {
            onAny {
                severity('fail')
            }
        }
    }
}

// TODO Ensure we run checks (health) on final Jar, not initial
build.dependsOn shadowJar
build.dependsOn("buildHealth")

// We only have a single artifact for now - this additional metadata is
// required for publishing to maven central. Only doing signing in 'CI'
publishing {
    publications {
        connector(MavenPublication) {
            from components.java
            pom {
                url = 'http://egeria.odpi.org'
                licenses {
                    // Code
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                    // Docs
                    license {
                        name = 'Creative Commons Attribution 4.0 International (CC BY 4.0)'
                        url = 'https://creativecommons.org/licenses/by/4.0'
                    }
                }
                developers {
                    developer {
                        id = 'planetf1'
                        name = 'Nigel Jones'
                        email = 'nigel.l.jones+git@gmail.com'
                    }
                    developer {
                        id = 'davidradl'
                        name = 'David Radley'
                        email = 'david_radley@uk.ibm.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/odpi/egeria-connector-hivemetastore.git'
                    developerConnection = 'scm:git:ssh://github.com/odpi/egeria-connector-hivemetastore.git'
                    url = 'http://github.com/odpi/egeria-connector-hivemetastore/tree/main'
                }
            }
            // Override the project name & description for the pom based on properties set in the child build.gradle (hard to default & required for maven central)
            pom.withXml {
                asNode().appendNode('name', "${project.ext.name}")
                asNode().appendNode('description', "${project.description}")
            }
        }
    }

    // Release versions get pushed to staging area on maven central, snapshots to snapshot repo
    // Secrets for credentials
    if (System.getenv("CI")) {
        repositories {
            maven {
                name = 'OSSRH'
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                // User token (under profile) on oss.sonatype.org
                credentials {
                    username = System.getenv("OSSRH_USERNAME")
                    password = System.getenv("OSSRH_TOKEN")
                }
            }
        }
    }
}

// To publish to ossrh we need to sign the artifacts - only in CI
if (System.getenv("CI")) {
    signing {
        // This is the publication to sign
        sign publishing.publications.connector
        // gpg --export-secret-keys myemal@gmail.com | base64
        def signingKey = System.getenv("OSSRH_GPG_PRIVATE_KEY")
        // Passphrase for key
        def signingPassword = System.getenv("OSSRH_GPG_PASSPHRASE")
        // public key id (last 8 characters only) - note keys also need uploading to all the main registries
        def signingKeyId = System.getenv("OSSRH_GPG_KEYID")
        // We use these values from secrets rather than gradle.properties
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    }
}

